#!/usr/bin/env ruby -wKU
# == Synopsis
#
# headers: find include headers
#
# == Usage
#
# --help:
#    show help
#
# -p/--prefix «string»
#    only show headers with «string» as prefix

USR_HEAD  = Regexp.escape "#include \"...\" search starts here:\n"
SYS_HEAD  = Regexp.escape "#include <...> search starts here:\n"
FOOTER    = Regexp.escape "End of search list."

COMPILER  = {
  "source.c"      => "gcc 2>&1 >/dev/null -E -v -x c /dev/null",
  "source.c++"    => "g++ 2>&1 >/dev/null -E -v -x c++ /dev/null",
  "source.objc"   => "gcc 2>&1 >/dev/null -E -v -x objective-c /dev/null",
  "source.objc++" => "g++ 2>&1 >/dev/null -E -v -x objective-c++ /dev/null",
}

require 'getoptlong'
require 'rdoc/usage'
require "pp"

def compiler_search_path(domain = :system)
  scope        = "source.c"
  scope        = $& if ENV["TM_SCOPE"] =~ /source.(obj)?c(\+\+)?/

  res = IO.popen(COMPILER[scope]) { |io| io.read }
  if res =~ /#{USR_HEAD}(.*)#{SYS_HEAD}(.*)#{FOOTER}/m
    case domain
      when :system  then $2
      when :user    then $1 + " .\n"
      when :all     then $1 + " .\n" + $2
    end.scan(/ (\S*)(?: \(framework directory\)$)?/).flatten
  else
    abort "Failed to parse compiler output.\nCommand: " + COMPILER[scope]
  end
end

def user_search_path(domain = :system)
  usr = ENV["TM_USR_HEADER_PATH"].to_s
  sys = ENV["TM_SYS_HEADER_PATH"].to_s

  res = case domain
    when :system  then sys
    when :user    then usr
    when :all     then "#{usr}:#{sys}"
  end.split(":")
  res.delete("")

  res.empty? ? nil : res
end

def expand_dirs(entries)
  entries.map do |entry|
    if entry =~ /(.*)\.framework$/
      if File.exists? "#$1.framework/Headers/#$1.h"
        "#$1/#$1.h"
      elsif File.exists? "#$1.framework/Headers"
        Dir["#$1.framework/Headers/[A-Za-z]*.h"].sort.map do |e|
          e.sub(/\.framework\/Headers\//, "/")
        end
      else
        [ ]
      end
    elsif File.directory? entry
      Dir[entry + "/[A-Za-z]*.h"].sort
    else
      entry
    end
  end
end

opts = GetoptLong.new(
  [ '--prefix', '-p', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--help',         GetoptLong::NO_ARGUMENT       ]
)

partial_word = ''

opts.each do |opt, arg|
  case opt
    when '--help'
      RDoc::usage
    when '--prefix'
      partial_word = arg
  end
end

dirs = user_search_path(:system) || compiler_search_path(:system)
res = [ ]
dirs.each do |dir|
  next unless File.exists?(dir)
  Dir.chdir(dir) { res << expand_dirs(Dir[partial_word + "*"].sort) }
end

STDOUT << res.flatten.sort.uniq.join("\n")
